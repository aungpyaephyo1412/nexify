generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model User {
  id             String      @id @default(uuid())
  profilePicture String?
  name           String
  email          String      @unique
  username       String      @unique @default(cuid())
  password       String
  bio            String?
  gender         Gender
  resetToken     String?
  expiredToken   DateTime?
  rememberToken  String?
  isVerified     Boolean     @default(false)
  isAdmin        Boolean     @default(false)
  isBlocked      Boolean     @default(false)
  dateOfBirth    DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  Post           Post[]
  Like           Like[]
  Comment        Comment[]
  Following      Following[] @relation("followings")
  Followers      Following[] @relation("followers")
}

model Following {
  id          String   @id @default(uuid())
  followerId  String
  follower    User     @relation("followings", references: [id], fields: [followerId], onDelete: Cascade)
  followingId String
  following   User     @relation("followers", references: [id], fields: [followingId], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Post {
  id        String    @id @default(uuid())
  caption   String?
  imageUrl  String?
  userId    String
  user      User      @relation(references: [id], fields: [userId], onDelete: Cascade)
  Like      Like[]
  Comment   Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Like {
  id        String   @id @default(uuid())
  postId    String
  post      Post     @relation(references: [id], fields: [postId], onDelete: Cascade)
  userId    String
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  caption   String
  postId    String
  post      Post     @relation(references: [id], fields: [postId], onDelete: Cascade)
  userId    String
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
